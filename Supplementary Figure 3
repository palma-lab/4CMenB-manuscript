library("HTqPCR")
library(dplyr)
library(tidyr)
library(stringi)
library("tibble")
library(ggplot2)
library(cowplot)
library(stringr)
library(ctrlGene)
library(readxl)
library(factoextra)
library(ggstar)
library(ggforce)
library(ggpubr)
library(ggsignif)
library(reshape2)
library(gridExtra)
library(grid)
library(EnhancedVolcano)
library("MatchIt")
library(ggh4x)
library(rstatix)


df = read.xlsx("Supporting Data Values.xlsx", 
               sheet = 3)
################################################################################### USE THIS lines FOR for Age MATCHING

prov = df[(df$cell_populations == "CD19+") & (df$TP == "T0"),]

m.out1 <- matchit(Group ~ Age_T0, data = prov,
                  method = "full", ratio = 2,caliper=0.1, 
                  m.order = "data")

nn.match<-match.data(m.out1)

age_test = test_group_difference(nn.match, "Group", "Age_T0")


plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "density", interactive = FALSE,
     which.xs = ~Age_T0)

#Age matching 
df = df[df$StudyPID %in% nn.match$StudyPID,]

#########################################################################################################

df$TP <- factor(df$TP, levels = c("T0", "T2"))

conting = df[df$cell_populations == "CD19+" & df$TP == "T2" & df$Treatment == "early treated", ]
table(conting$Group)

#LONGITUDINAL ANALYSIS
df <- df %>%
  group_by(StudyPID, cell_populations) %>%
  filter(all(c("T0", "T2") %in% TP)) %>%
  ungroup()

df$StudyPID = as.factor(df$StudyPID)
df$Group <- factor(df$Group, levels = c("HC", "PHIV"))
df$TP <- factor(df$TP, levels = c("T0", "T2"))
df$cell_populations <- factor(df$cell_populations)

####AGGIUNTA EARLY-LATE COMPARISON:
pl_df_early <- df %>%
  filter(Treatment == "early treated") %>%
  mutate(Group = "Early")

pl_df_late <- df %>%
  filter(Treatment == "late treated") %>%
  mutate(Group = "Late")

# Combine the original data with the duplicated rows
pl_df_2 <- bind_rows(df, pl_df_early, pl_df_late)
pl_df_2$Group = factor(pl_df_2$Group, levels = c("HC", "PHIV", "Early", "Late"))


##############
# Reorder the levels of the cell_populations variable
order_notag = c("CD19+", 
                "CD27-IgD+ (Naive)",
                "CD27+IgD+ (USM)",
                "CD27+IgD- (SM)",
                "CD27-IgD- (DN)",
                "CD27+CD21- (AM)",
                "CD27-CD21- (TLM)")


pl_df_2 = pl_df_2 %>%
  filter(cell_populations %in% order_notag)


pl_df_2$cell_populations = factor(pl_df_2$cell_populations, levels = c("CD19+",
                                                                           "CD27-IgD+ (Naive)",
                                                                           "CD27+IgD+ (USM)",
                                                                           "CD27+IgD- (SM)",
                                                                           "CD27-IgD- (DN)",
                                                                           "CD27+CD21- (AM)",
                                                                           "CD27-CD21- (TLM)"))


# Step 2: Perform tests based on normality results
results_list_btw <- list()
results_list_wtn <- list()


# Iterate through each unique cell_populations
for (cp in order_notag) {
  print(cp)
  
  # Filter data for the specific cell_population
  subset_data <- pl_df_2 %>%
    filter(cell_populations == cp)
  
  # Check normality for pairwise comparisons within the same group at different time points
  result_group_comparison <- subset_data %>%
    group_by(TP, Group) %>%
    summarize(p_value = shapiro_test(frequencies)$p.value) 
  
  # Check if any group is not normal within the same TP
  non_normal_groups_within_tp <- any(result_group_comparison$p_value < 0.05)
  
  if (length(unique(subset_data$Group)) > 2){
    # Perform test based on normality
    if (non_normal_groups_within_tp) {
      # If at least one group is not normal, perform Dunn test
      result_btwn_groups <- subset_data %>%
        #PHIV group not considered as the elements are already present in early and late groups
        filter(Group != "PHIV") %>%
        group_by(facet, TP, cell_populations) %>%
        dunn_test(frequencies ~ Group, p.adjust.method = "fdr") %>%
        select(-statistic) %>% 
        add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1) 
    
      result_wtn_groups <- subset_data %>%
        group_by(facet, Group, cell_populations) %>%
        dunn_test(frequencies ~ TP, p.adjust.method = "fdr") %>%
        select(-statistic) %>%
        add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
      
      
      } else {
      # If all groups are normal, perform pairwise t-test
        result_btwn_groups <- subset_data %>%
          group_by(facet, TP, cell_populations) %>%
          pairwise_t_test(frequencies ~ Group, p.adjust.method = "fdr", comparisons = list(c("HC", "Early"), 
                                                                                           c("HC", "Late"), 
                                                                                           c("Early", "Late"))) %>%
          select(-p.signif) %>% 
          add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    
        result_wtn_groups <- subset_data %>%
          group_by(facet, Group, cell_populations) %>%
          pairwise_t_test(frequencies ~ TP, p.adjust.method = "fdr") %>%
          select(-p.signif) %>% 
          add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
      }
  } else {
    if (non_normal_groups_within_tp) {
      # If at least one group is not normal, perform Dunn test
      subset_data$frequencies = as.numeric(subset_data$frequencies)
      
      result_btwn_groups <- subset_data %>%
        group_by(cell_populations, TP) %>%
        wilcox_test(frequencies ~ Group, p.adjust.method = "fdr", exact = FALSE) %>%
        select(-statistic) %>% 
        add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    
      result_wtn_groups <- subset_data %>%
        group_by(cell_populations, Group) %>%
        wilcox_test(frequencies ~ TP, p.adjust.method = "fdr", exact = FALSE, paired = TRUE) %>%
        select(-statistic) %>% 
        add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    } else {
      # If all groups are normal, perform pairwise t-test
      result_btwn_groups <- subset_data %>%
        group_by(cell_populations, TP) %>%
        t_test(frequencies ~ Group, p.adjust.method = "fdr") %>%
        select(-statistic, -df) %>% 
        add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    
      result_wtn_groups <- subset_data %>%
        group_by(cell_populations, Group) %>%
        t_test(frequencies ~ TP, p.adjust.method = "fdr", paired = TRUE) %>%
        select(-statistic, -df) %>% 
        add_xy_position(x = "TP", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    }
  }
  # Add the result to the list
  results_list_btw[[cp]] <- result_btwn_groups
  results_list_wtn[[cp]] <- result_wtn_groups
}

# Step 3: Merge all the results
final_results_btw <- do.call(rbind, results_list_btw)
final_results_wtn <- do.call(rbind, results_list_wtn)

pwc <- final_results_btw %>% filter(p.adj.signif != "ns")
pwc$p.adj =  ifelse(round(pwc$p.adj, 3) < 0.001, "< 0.001", round(pwc$p.adj, 3))

pwc2 <- final_results_wtn %>% filter(p.adj.signif != "ns")
pwc2$p.adj =  ifelse(round(pwc2$p.adj, 3) < 0.001, "< 0.001", round(pwc2$p.adj, 3))





stat_test_list = list()
# Iterate through each unique cell_populations
for (cp in order_notag) {
  print(cp)
  
  # Filter data for the specific cell_population
  subset_data <- pl_df_2 %>%
    filter(cell_populations == cp, TP == "T0")
  
  # plot the values with Group as hue
  result_group_comparison <- subset_data %>%
    filter(Group %in% c("HC", "PHIV")) %>%
    group_by(TP, Group) %>%
    summarize(p_value = shapiro_test(frequencies)$p.value) 
  
  print(result_group_comparison)
  # Check if any group is not normal within the same TP
  non_normal_groups_within_tp <- any(result_group_comparison$p_value < 0.05)
  
  if (non_normal_groups_within_tp) {
    stat.test_t0 <- subset_data %>%
      group_by(facet, cell_populations, TP) %>%
      wilcox_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic) %>%
      add_xy_position(x = "TP", group = "Group", dodge = 1)
  } else {
    stat.test_t0 <- subset_data %>%
      group_by(facet, cell_populations, TP) %>%
      t_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic, -df) %>%
      add_xy_position(x = "TP", group = "Group", dodge = 1)
  }
  
  # Filter data for the specific cell_population
  subset_data <- pl_df_2 %>%
    filter(cell_populations == cp, TP == "T2")
  
  # plot the values with Group as hue
  result_group_comparison <- subset_data %>%
    filter(Group %in% c("HC", "PHIV")) %>%
    group_by(TP, Group) %>%
    summarize(p_value = shapiro_test(frequencies)$p.value) 
  
  print(result_group_comparison)
  # Check if any group is not normal within the same TP
  non_normal_groups_within_tp <- any(result_group_comparison$p_value < 0.05)
  
  if (non_normal_groups_within_tp) {
    stat.test_t2 <- subset_data %>%
      group_by(facet, cell_populations, TP) %>%
      wilcox_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic) %>%
      add_xy_position(x = "TP", group = "Group", dodge = 1)
  } else {
    stat.test_t2 <- subset_data %>%
      group_by(facet, cell_populations, TP) %>%
      t_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic, -df) %>%
      add_xy_position(x = "TP", group = "Group", dodge = 1)
  }
  print(stat.test_t0)
  print(stat.test_t2)
  stat.test = rbind(stat.test_t0, stat.test_t2)
  # Add the result to the list
  stat_test_list[[cp]] <- stat.test
}

# Step 3: Merge all the results
final_stat_results_btw <- do.call(rbind, stat_test_list) 

pwc_2grp <- final_stat_results_btw %>% filter(p.adj.signif != "ns")
pwc_2grp$p.adj =  ifelse(round(pwc_2grp$p.adj, 3) < 0.001, "< 0.001", round(pwc_2grp$p.adj, 3))

max_y_values <- pl_df_2 %>%
  group_by(Group, TP, cell_populations) %>%
  summarize(max_frequency = max(frequencies))


# FIX xvalues of pwc 
pwc$xmin = 1.62

for (i in seq_along(pwc$TP)) {
  group2 <- pwc$group2[i]
  cell_population <- pwc$cell_populations[i]
  
  # Find the matching row in pwc2
  matching_row <- pwc2[pwc2$Group == group2 & pwc2$cell_populations == cell_population, ]
  
  # If a match is found, update the xmax value
  if (nrow(matching_row) > 0) {
    pwc$xmax[i] <- matching_row$xmax
  }
}



# Merge rows using bind_rows
merged_btw <- bind_rows(pwc, pwc_2grp)

stat_result_tibble_wtn = pwc2
stat_result_tibble_btw = merged_btw

# Function to calculate the y.position based on max_y_values
calculate_y_positions <- function(max_y_values, tibble_result) {
  unique_cell_populations <- unique(tibble_result$cell_populations)
  if (colnames(tibble_result)[1] == "Group") {
    
    for (cell_population in unique_cell_populations) {
      print(cell_population)
      
      max_value <- max(max_y_values[(max_y_values$Group %in% unique(max_y_values$Group)) & (max_y_values$cell_populations == cell_population),]$max_frequency, na.rm = TRUE)
      #print(max_value)
      indices <- tibble_result$cell_populations == cell_population
      #print(tibble_result[indices,"y.position"])
      
      # Automatically compute step_increase based on the range of max_frequency
      step_increase <- (max_value + 3) / length(indices) * 3
      
      tibble_result[indices, "y.position"] <- seq(from = max_value + 3, 
                                                  by = step_increase, 
                                                  length.out = dim(tibble_result[indices,"y.position"])[1])
      #print(tibble_result[indices,"y.position"])
      }
    } else {
      unique_tps <- unique(tibble_result$TP)
      for (cell_population in unique_cell_populations) {
        for (tp in unique_tps) {
          print(cell_population)
          print(tp)
          max_value <- max(max_y_values[(max_y_values$cell_populations == cell_population) & (max_y_values$TP == tp),]$max_frequency, na.rm = TRUE)
          print(max_value)
          indices <- tibble_result$cell_populations == cell_population & tibble_result$TP == tp
          print(indices)
          print(dim(tibble_result[indices,"y.position"])[1])
          
          # Automatically compute step_increase based on the range of max_frequency
          step_increase <- (max_value + 3) / length(indices) *3
          
          tibble_result[indices, "y.position"] <- seq(from = max_value + 3, 
                                                      by = step_increase, 
                                                      length.out = dim(tibble_result[indices,"y.position"])[1])
          print(tibble_result[indices,"y.position"])  
        }
      }
    }
  return(tibble_result)
}

# Replace y.position based on the first column
stat_result_tibble_btw <- calculate_y_positions(max_y_values, 
                                             stat_result_tibble_btw)

stat_result_tibble_wtn <- calculate_y_positions(max_y_values, 
                                             stat_result_tibble_wtn)

###################################################################################################################### SUPPLEMENTARY FIGURE 3 PLOT
B_tp_1 = ggviolin(pl_df_2, 
                   x = "TP", 
                   y = "frequencies", 
                   color = "Group", 
                   alpha = 0.5,
                   fill = "Group",
                   position = position_dodge(width = 1),
                   trim = T,
                   scale = "width",
                   scales = "free_y",
                   #facet.by = c("facet", "cell_populations"),
                   add = c("boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan', "Late" = 'darkorange')) +
  scale_color_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan', "Late" = 'darkorange')) +
  labs(x = "Time Points", y = "Frequency (%)", color = "Group", fontsize = 8) +
  stat_summary(fun = "median", 
               aes(colour = Group), 
               geom = "crossbar", 
               width = 0.6,
               position = position_dodge(width = 1)) +
  stat_summary(fun = median, geom = "line", aes(group = Group, color = Group), linewidth = .75, position = position_dodge(width = 1)) +
  stat_pvalue_manual(stat_result_tibble_btw, hide.ns = T, label = "p.adj", size = 6, tip.length = 0.01, step.group.by = "TP", vjust = -0.1) +
  stat_pvalue_manual(stat_result_tibble_wtn, hide.ns = T, label = "p.adj", size = 6, tip.length = 0.01, step.group.by = "Group", vjust = -0.1) +
  scale_x_discrete(labels = c("T0", "T2", "T3")) +
  geom_jitter(aes(fill = Group),color = "black",  position = position_jitterdodge(jitter.width = 0.2, jitter.height = 0.2, dodge.width = 1)) +
  facet_nested_wrap(facet ~ cell_populations, scales = "free_y", ncol = 4, nrow = 2) +
  scale_y_continuous(expand = expansion(mult = c(0.1, 0.1))) +
  theme_classic(base_size = 30) 
B_tp_1
