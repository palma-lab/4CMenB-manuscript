############################################################################################################################# FIGURE 2 PLOT

df_ag = read.xlsx("MenB_Figures_data.xlsx", 
                sheet = 4)

df_ag$cell_populations <- factor(df_ag$cell_populations, levels = order_ag)


df_ag$Group = as.factor(df_ag$Group)
df_ag$Gender = as.factor(df_ag$Gender)


############################################################################################################### AGE MATCHED DF
cd19 = df_ag[df_ag$cell_populations == "fHbp+ CD27+IgD-IgG+ (Switched Memory)", ]

age_test = test_group_difference(cd19, "Group", "Age_T2")

# No matching; constructing a pre-match matchit object
m.out0 <- matchit(Group ~ Age_T2, data = cd19,
                  method = NULL, distance = "glm")
summary(m.out0)

m.out1 <- matchit(Group ~ Age_T2, data = cd19,
                  method = "full", ratio = 2, caliper=0.1, 
                  m.order = "data")

nn.match<-match.data(m.out1)

age_test = test_group_difference(nn.match, "Group", "Age_T2")


summary(m.out1, un = FALSE)

plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "density", interactive = FALSE,
     which.xs = ~Age_T2)

##################################################################################################################

df_new <- df_ag %>%
  mutate(Group = ifelse(!is.na(Treatment), ifelse(Treatment == "early treated", paste0(Group, " Early"), paste0(Group, " Late")), "HC"))

df_ag_early <- df_ag %>%
  filter(Treatment == "early treated") %>%
  mutate(Group = "Early")

df_ag_late <- df_ag %>%
  filter(Treatment == "late treated") %>%
  mutate(Group = "Late")

# Combine the original data with the duplicated rows
df_ag_2 <- bind_rows(df_ag, df_ag_early, df_ag_late)
df_ag_2$Group = factor(df_ag_2$Group, levels = c("HC", "PHIV", "Early", "Late"))

df_ag_2$cell_populations <- gsub('fHbp\\+ CD27\\+IgD-IgG\\+ \\(Switched Memory\\)', 'fHbp+ SM', df_ag_2$cell_populations)
df_ag_2$cell_populations = gsub('fHbp\\+ CD27\\- CD21\\- \\(Tissue like Memory\\)', 'fHbp+ TLM', df_ag_2$cell_populations)
df_ag_2$cell_populations = gsub('fHbp\\+ CD27\\+ CD21\\- \\(Activated Memory\\)', 'fHbp+ AM', df_ag_2$cell_populations)

df_ag_2$cell_populations = factor(df_ag_2$cell_populations, levels = c("fHbp+ SM","fHbp+ AM", "fHbp+ TLM"))

################################################### STATISTICAL ANALYSIS:

#NO AGE MATCHED 
df1 = df_ag_2
#AGE MATCHED
df1 = df_ag_2[(df_ag_2$StudyPID %in% nn.match$StudyPID),]



df1$Group = factor(df1$Group, levels = c("HC", "PHIV", "Early", "Late"))
df2 = df1[df1$Group != "PHIV", ]
df2$Group = factor(df2$Group, levels = c("HC", "Early", "Late"))

df1$cell_populations = gsub("fHbp\\+ SM", "fHbp+ on SM", df1$cell_populations)
df1$cell_populations = gsub("fHbp\\+ AM", "AM on fHbp+", df1$cell_populations)
df1$cell_populations = gsub("fHbp\\+ TLM", "TLM on fHbp+", df1$cell_populations)
df1$cell_populations = factor(df1$cell_populations, levels = c("fHbp+ on SM", "AM on fHbp+", "TLM on fHbp+"))

conting = df1[df1$cell_populations == "fHbp+ on SM", ]
table(conting$Group)

#check for normality assumption
shapiro = df1 %>%
  group_by(cell_populations, Group) %>%
  shapiro_test(frequencies)

pwc <- df1 %>%
  group_by(cell_populations) %>%
  filter(Group != "PHIV") %>% 
  test_group_difference_anova("Group", "frequencies", padj = "fdr")

pwc_2 <- pwc[[3]] %>% 
  add_xy_position(x = "Group", 
                  scales = "free_y", 
                  fun = "max",
                  step.increase= 0.1)

#plot SM
el_plot_1 <- ggviolin(df1[df1$cell_populations == "fHbp+ on SM",], 
                      x = "Group", 
                      y = "frequencies", 
                      fill = "Group", 
                      #facet.by = "cell_populations",
                      scale = "width",
                      position = position_dodge(width = 1),
                      trim = T,
                      alpha = 0.6,
                      scales = "free_y", 
                      add = c("jitter", "boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  stat_compare_means( 
    comparisons = list(c("HC", "PHIV")), 
    label = "p.format", 
    tip.length = 0.01,
    size = 6, 
    method = "t.test", 
    method.args = list(exact = FALSE)) +
  xlab("") +
  labs(fontsize = 8) +
  ylab("% of fHbp+ on SM") + 
  theme_classic(base_size = 30) +
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y = element_text(size = 17.5),
        legend.title = element_text(size = 17.5),
        legend.text = element_text(size = 15)) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.08))) + 
  stat_pvalue_manual(pwc_2[pwc_2$cell_populations == "fHbp+ on SM",],
                     scales = "free_y",
                     tip.length = 0.01,
                     step.increase = 0.015,
                     label = "{round(p.adj, 2)}",
                     size = 6) 

#plot AM
el_plot_2 <- ggviolin(df1[df1$cell_populations == "AM on fHbp+",], 
                      x = "Group", 
                      y = "frequencies", 
                      fill = "Group", 
                      #facet.by = "cell_populations",
                      scale = "width",
                      position = position_dodge(width = 1),
                      trim = T,
                      alpha = 0.6,
                      scales = "free_y", 
                      add = c("jitter", "boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  stat_compare_means( 
    comparisons = list(c("HC", "PHIV")), 
    label = "p.format", 
    tip.length = 0.01,
    size = 6, 
    method = "wilcox.test", 
    method.args = list(exact = FALSE)) +
  xlab("") +
  labs(fontsize = 8) +
  ylab("% of AM on fHbp+") + 
  theme_classic(base_size = 30) +
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y = element_text(size = 17.5),
        legend.title = element_text(size = 17.5),
        legend.text = element_text(size = 15)) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.08))) + 
  stat_pvalue_manual(pwc_2[pwc_2$cell_populations == "AM on fHbp+",],
                     scales = "free_y",
                     tip.length = 0.01,
                     step.increase = 0.015,
                     label = "{round(p.adj, 2)}",
                     size = 6) 

#plot TLM
el_plot_3 <- ggviolin(df1[df1$cell_populations == "TLM on fHbp+",], 
                      x = "Group", 
                      y = "frequencies", 
                      fill = "Group", 
                      #facet.by = "cell_populations",
                      scale = "width",
                      position = position_dodge(width = 1),
                      trim = T,
                      alpha = 0.6,
                      scales = "free_y", 
                      add = c("jitter", "boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  stat_compare_means( 
    comparisons = list(c("HC", "PHIV")), 
    label = "p.format", 
    tip.length = 0.01,
    size = 6, 
    method = "wilcox.test", 
    method.args = list(exact = FALSE)) +
  xlab("") +
  ylab("% of TLM on fHbp+") +
  labs(fontsize = 8) + 
  theme_classic(base_size = 30) +
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y = element_text(size = 17.5),
        legend.title = element_text(size = 17.5),
        legend.text = element_text(size = 15)) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.08))) + 
  stat_pvalue_manual(pwc_2[pwc_2$cell_populations == "TLM on fHbp+",],
                     scales = "free_y",
                     tip.length = 0.01,
                     step.increase = 0.015,
                     label = "{round(p.adj, 2)}",
                     size = 6) 

############################################################################################### FIGURE 3A PLOT
new =  ggarrange(el_plot_1, el_plot_2, el_plot_3, 
                 nrow = 1, 
                 ncol = 3, 
                 widths = c(1, 1, 1), 
                 common.legend = TRUE, 
                 legend = "right")

############################################################################################### SUPPLEMENTARY FIGURE 4
#match con dati SBA per confronto SC vs NSC
men_sba = read.xlsx("MenB_Figures_data.xlsx", 
                sheet = 1)

df1 <- merge(df1, men_sba[c("StudyPID", "SBA_res")], by = "StudyPID", all.x = TRUE)

df1 <- df1 %>%
  filter(!is.na(SBA_res))

df1$SBA_res <- gsub("UR", "NSC", df1$SBA_res)
df1$SBA_res <- gsub("R", "SC", df1$SBA_res)


# Convert SBA_res to factor with levels R and UR
df1$SBA_res <- factor(df1$SBA_res, levels = c("SC", "NSC"))


#Perform tests based on normality results
results_list_btw <- list()
results_list_wtn <- list()


# Iterate through each unique cell_populations
for (cp in unique(df1$cell_populations)) {
  print(cp)
  
  # Filter data for the specific cell_population
  subset_data <- df1 %>%
    filter(cell_populations == cp)
  
  # Check normality for pairwise comparisons within the same group at different time points
  result_group_comparison <- subset_data %>%
    filter(Group != "Early") %>% #few data
    group_by(SBA_res, Group) %>%
    summarize(p_value = shapiro_test(frequencies)$p.value) 
  
  # Check if any group is not normal within the same TP
  non_normal_groups_within_tp <- any(result_group_comparison$p_value < 0.05)
  
  if (length(unique(subset_data$Group)) > 2){
    # Perform test based on normality
    if (non_normal_groups_within_tp) {
      # If at least one group is not normal, perform Dunn test
      result_btwn_groups <- subset_data %>%
        #PHIV group not considered as the elements are already present in early and late groups
        filter(Group != "PHIV") %>%
        group_by(SBA_res, cell_populations) %>%
        dunn_test(frequencies ~ Group, p.adjust.method = "fdr") %>%
        select(-statistic) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1) 
      
      result_wtn_groups <- subset_data %>%
        group_by(Group, cell_populations) %>%
        dunn_test(frequencies ~ SBA_res, p.adjust.method = "fdr") %>%
        select(-statistic) %>%
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
      
      
    } else {
      print("PAIRWISE T")
      # If all groups are normal, perform pairwise t-test
      result_btwn_groups <- subset_data %>%
        group_by(SBA_res, cell_populations) %>%
        pairwise_t_test(frequencies ~ Group, p.adjust.method = "fdr", comparisons = list(c("HC", "Early"), 
                                                                                         c("HC", "Late"), 
                                                                                         c("Early", "Late"))) %>%
        select(-p.signif) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
      
      result_wtn_groups <- subset_data %>%
        group_by(Group, cell_populations) %>%
        pairwise_t_test(frequencies ~ SBA_res, p.adjust.method = "fdr") %>%
        select(-p.signif) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    }
  } else {
    if (non_normal_groups_within_tp) {
      # If at least one group is not normal, perform Dunn test
      subset_data$frequencies = as.numeric(subset_data$frequencies)
      
      result_btwn_groups <- subset_data %>%
        group_by(cell_populations, SBA_res) %>%
        wilcox_test(frequencies ~ Group, p.adjust.method = "fdr", exact = FALSE) %>%
        select(-statistic) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
      
      result_wtn_groups <- subset_data %>%
        group_by(cell_populations, Group) %>%
        wilcox_test(frequencies ~ SBA_res, p.adjust.method = "fdr", exact = FALSE, paired = F) %>%
        select(-statistic) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    } else {
      # If all groups are normal, perform pairwise t-test
      result_btwn_groups <- subset_data %>%
        group_by(cell_populations, SBA_res) %>%
        t_test(frequencies ~ Group, p.adjust.method = "fdr") %>%
        select(-statistic, -df) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
      
      result_wtn_groups <- subset_data %>%
        group_by(cell_populations, Group) %>%
        t_test(frequencies ~ SBA_res, p.adjust.method = "fdr", paired = F) %>%
        select(-statistic, -df) %>% 
        add_xy_position(x = "SBA_res", group = "Group", scales = "free_y", step.increase = 0.1, dodge = 1)
    }
  }
  # Add the result to the list
  results_list_btw[[cp]] <- result_btwn_groups
  results_list_wtn[[cp]] <- result_wtn_groups
}

# Step 3: Merge all the results
final_results_btw <- do.call(rbind, results_list_btw)
final_results_wtn <- do.call(rbind, results_list_wtn)

pwc <- final_results_btw %>% filter(p.adj.signif != "ns")
pwc$p.adj =  ifelse(round(pwc$p.adj, 3) < 0.001, "< 0.001", round(pwc$p.adj, 3))

pwc2 <- final_results_wtn %>% filter(p.adj.signif != "ns")
pwc2$p.adj =  ifelse(round(pwc2$p.adj, 3) < 0.001, "< 0.001", round(pwc2$p.adj, 3))

stat_test_list = list()
# Iterate through each unique cell_populations
for (cp in unique(df1$cell_populations)) {
  print(cp)
  
  # Filter data for the specific cell_population
  subset_data <- df1 %>%
    filter(cell_populations == cp, SBA_res == "SC")
  
  # plot the values with Group as hue
  result_group_comparison <- subset_data %>%
    filter(Group %in% c("HC", "PHIV")) %>%
    group_by(SBA_res, Group) %>%
    summarize(p_value = shapiro_test(frequencies)$p.value) 
  
  print(result_group_comparison)
  # Check if any group is not normal within the same TP
  non_normal_groups_within_tp <- any(result_group_comparison$p_value < 0.05)
  
  if (non_normal_groups_within_tp) {
    stat.test_t0 <- subset_data %>%
      group_by(cell_populations, SBA_res) %>%
      wilcox_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic) %>%
      add_xy_position(x = "SBA_res", group = "Group", dodge = 1)
  } else {
    stat.test_t0 <- subset_data %>%
      group_by(cell_populations, SBA_res) %>%
      t_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic, -df) %>%
      add_xy_position(x = "SBA_res", group = "Group", dodge = 1)
  }
  
  # Filter data for the specific cell_population
  subset_data <- df1 %>%
    filter(cell_populations == cp, SBA_res == "NSC")
  
  # plot the values with Group as hue
  result_group_comparison <- subset_data %>%
    filter(Group %in% c("HC", "PHIV")) %>%
    group_by(SBA_res, Group) %>%
    summarize(p_value = shapiro_test(frequencies)$p.value) 
  
  print(result_group_comparison)
  # Check if any group is not normal within the same TP
  non_normal_groups_within_tp <- any(result_group_comparison$p_value < 1)
  
  if (non_normal_groups_within_tp) {
    stat.test_t2 <- subset_data %>%
      group_by(cell_populations, SBA_res) %>%
      wilcox_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic) %>%
      add_xy_position(x = "SBA_res", group = "Group", dodge = 1)
  } else {
    stat.test_t2 <- subset_data %>%
      group_by(cell_populations, SBA_res) %>%
      t_test(frequencies ~ Group, comparisons = list(c("HC", "PHIV"))) %>%
      select(-statistic, -df) %>%
      add_xy_position(x = "SBA_res", group = "Group", dodge = 1)
  }
  
  stat.test = rbind(stat.test_t0, stat.test_t2)
  # Add the result to the list
  stat_test_list[[cp]] <- stat.test
}

# Step 3: Merge all the results
final_stat_results_btw <- do.call(rbind, stat_test_list) 

pwc_2grp <- final_stat_results_btw %>% filter(p.adj.signif != "ns")
pwc_2grp$p.adj =  ifelse(round(pwc_2grp$p.adj, 3) < 0.001, "< 0.001", round(pwc_2grp$p.adj, 3))

# Merge rows using bind_rows
merged_btw <- bind_rows(pwc, pwc_2grp)

stat_result_tibble_wtn = pwc2
stat_result_tibble_btw = merged_btw


#plot SM
el_plot_1 <- ggviolin(df1[df1$cell_populations == "fHbp+ on SM",], 
                      x = "SBA_res", 
                      y = "frequencies", 
                      color = "Group",
                      fill = "Group", 
                      scale = "width",
                      position = position_dodge(width = 1),
                      trim = T,
                      alpha = 0.6,
                      scales = "free_y", 
                      add = c("boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  scale_color_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  xlab("") +
  ylab("% of fHbp+ on SM") + 
  scale_x_discrete(labels = c("SC", "NSC")) +
  geom_jitter(aes(fill = Group),color = "black",  position = position_jitterdodge(dodge.width = 1)) +
  theme_classic(base_size = 30) +
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y = element_text(size = 17.5),
        legend.title = element_text(size = 17.5),
        legend.text = element_text(size = 15)) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.08))) + 
  stat_pvalue_manual(stat_result_tibble_btw[stat_result_tibble_btw$cell_populations == "fHbp+ on SM",],
                     scales = "free_y",
                     tip.length = 0.01,
                     #step.increase = 0.01,
                     label = "{round(p.adj, 2)}",
                     size = 6) +
  stat_pvalue_manual(stat_result_tibble_wtn[stat_result_tibble_wtn$cell_populations == "fHbp+ on SM",],
                     scales = "free_y",
                     tip.length = 0.01,
                     #step.increase = 0.01,
                     label = "{round(p.adj, 2)}",
                     size = 6) 

#plot AM
el_plot_2 <- ggviolin(df1[df1$cell_populations == "AM on fHbp+",], 
                      x = "SBA_res", 
                      y = "frequencies", 
                      color = "Group",
                      fill = "Group", 
                      scale = "width",
                      position = position_dodge(width = 1),
                      trim = T,
                      alpha = 0.6,
                      scales = "free_y", 
                      add = c("boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  scale_color_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  xlab("") +
  ylab("% of AM on fHbp+") + 
  scale_x_discrete(labels = c("SC", "NSC")) +
  geom_jitter(aes(fill = Group),color = "black",  position = position_jitterdodge(dodge.width = 1)) +
  theme_classic(base_size = 30) +
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y = element_text(size = 17.5),
        legend.title = element_text(size = 17.5),
        legend.text = element_text(size = 15)) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.08))) + 
  stat_pvalue_manual(stat_result_tibble_btw[stat_result_tibble_btw$cell_populations == "AM on fHbp+",],
                     scales = "free_y",
                     tip.length = 0.01,
                     #step.increase = 0.01,
                     label = "{round(p.adj, 2)}",
                     size = 6) +
  stat_pvalue_manual(stat_result_tibble_wtn[stat_result_tibble_wtn$cell_populations == "AM on fHbp+",],
                     scales = "free_y",
                     tip.length = 0.01,
                     #step.increase = 0.01,
                     label = "{round(p.adj, 2)}",
                     size = 6) 

#plot TLM
el_plot_3 <- ggviolin(df1[df1$cell_populations == "TLM on fHbp+",], 
                      x = "SBA_res", 
                      y = "frequencies", 
                      color = "Group",
                      fill = "Group", 
                      #facet.by = "cell_populations",
                      scale = "width",
                      position = position_dodge(width = 1),
                      trim = T,
                      alpha = 0.6,
                      scales = "free_y", 
                      add = c("boxplot")) +
  scale_fill_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  scale_color_manual(values = c("HC" = "blue", "PHIV" = "red", "Early" = 'darkcyan',"Late" = "orange")) +
  xlab("") +
  ylab("% of TLM on fHbp+") + 
  scale_x_discrete(labels = c("SC", "NSC")) +
  geom_jitter(aes(fill = Group),color = "black",  position = position_jitterdodge(dodge.width = 1)) +
  theme_classic(base_size = 30) +
  theme(axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        axis.title.y = element_text(size = 17.5),
        legend.title = element_text(size = 17.5),
        legend.text = element_text(size = 15)) +
  scale_y_continuous(expand = expansion(mult = c(0.01, 0.08))) + 
  stat_pvalue_manual(stat_result_tibble_btw[stat_result_tibble_btw$cell_populations == "TLM on fHbp+",],
                     scales = "free_y",
                     tip.length = 0.01,
                     #step.increase = 0.01,
                     label = "{round(p.adj, 2)}",
                     size = 6) +
  stat_pvalue_manual(stat_result_tibble_wtn[stat_result_tibble_wtn$cell_populations == "TLM on fHbp+",],
                     scales = "free_y",
                     tip.length = 0.01,
                     #step.increase = 0.01,
                     label = "{round(p.adj, 2)}",
                     size = 6)  

############################################################################################### SUP FIGURE 4 PLOT:

new =  ggarrange(el_plot_1, el_plot_2, el_plot_3, 
                 nrow = 1, 
                 ncol = 3, 
                 widths = c(1, 1, 1), 
                 common.legend = TRUE, 
                 legend = "right")

comb = grid.arrange(new, 
                       ncol = 3, 
                       widths = c(0.05, 1, 0.05), 
                       layout_matrix = rbind(c(NA,1,NA)))
